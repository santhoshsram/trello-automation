{
	"info": {
		"_postman_id": "be4b1ca6-605b-4df8-a97e-b6b95723b23b",
		"name": "TrelloReports",
		"description": "This postman collection is closely tied to my trello board. It does the below,\n1. Move all cards from weekly done list to overall completed list.\n2. Generate a report card with all cards completed, incoming and pending.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "FindBoardID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "989b425f-e601-45fc-bf30-0e7a2238c1e9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var board_name = pm.environment.get('board_name');",
							"var json_data = pm.response.json();",
							"var board_id = -1;",
							"for (var idx = 0 ; idx < json_data.length ; idx ++) {",
							"    if (json_data[idx].name == board_name) {",
							"        board_id = json_data[idx].id;",
							"        pm.environment.set('board_id', board_id);",
							"    }",
							"}",
							"",
							"pm.test(\"Find board id of board \\\"\" + board_name +\"\\\"\", function () {",
							"    pm.expect(board_id).not.eql(-1);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "00b2515a-0e34-4a95-b906-baa83cc501e7",
						"exec": [
							"pm.test('board_name should exist', function () {",
							"    pm.expect(pm.environment.has('board_name')).to.equal(true);",
							"});",
							"",
							"pm.test('inprogress_list_name should exist', function () {",
							"    pm.expect(pm.environment.has('inprogress_list_name')).to.equal(true);",
							"});",
							"",
							"pm.test('incoming_list_name should exist', function () {",
							"    pm.expect(pm.environment.has('incoming_list_name')).to.equal(true);",
							"});",
							"",
							"pm.test('weekly_completion_list_name should exist', function () {",
							"    pm.expect(pm.environment.has('weekly_completion_list_name')).to.equal(true);",
							"});",
							"",
							"pm.test('overall_completion_list_name should exist', function () {",
							"    pm.expect(pm.environment.has('overall_completion_list_name')).to.equal(true);",
							"});",
							"",
							"pm.test('label_name should exist', function () {",
							"    pm.expect(pm.environment.has('label_name')).to.equal(true);",
							"});",
							"",
							"pm.test('label_color should exist', function () {",
							"    pm.expect(pm.environment.has('label_color')).to.equal(true);",
							"});",
							"",
							"pm.test('report_card_color should exist', function () {",
							"    pm.expect(pm.environment.has('report_card_color')).to.equal(true);",
							"});",
							"",
							"pm.test('cleanup_env_b4_begin should exist', function () {",
							"    pm.expect(pm.environment.has('cleanup_env_b4_begin')).to.equal(true);",
							"});",
							"",
							"if (!pm.environment.has('board_name') ||",
							"    !pm.environment.has('inprogress_list_name') ||",
							"    !pm.environment.has('incoming_list_name') ||",
							"    !pm.environment.has('weekly_completion_list_name') ||",
							"    !pm.environment.has('overall_completion_list_name') ||",
							"    !pm.environment.has('label_name') ||",
							"    !pm.environment.has('label_color') ||",
							"    !pm.environment.has('report_card_color') ||",
							"    !pm.environment.has('cleanup_env_b4_begin')) {",
							"    throw new Error ('One or more required environment variables is/are not found. Check the Pre-req test results for details.');",
							"}",
							"",
							"if (parseInt(pm.environment.get('cleanup_env_b4_begin')) == 1) {",
							"    /*",
							"     * Cleanup all env vars that will be generated by the GET",
							"     * calls in this sequence. These need to be set each time",
							"     * the collection is run and should not be stale",
							"     */",
							"    pm.environment.unset('board_id');",
							"    pm.environment.unset('weekly_completion_list_id');",
							"    pm.environment.unset('overall_completion_list_id');",
							"    pm.environment.unset('incoming_list_id');",
							"    pm.environment.unset('inprogress_list_id');",
							"    pm.environment.unset('card_list');",
							"    pm.environment.unset('cur_card_idx');",
							"    pm.environment.unset('cur_card_id');",
							"    pm.environment.unset('label_id');",
							"    pm.environment.unset('report_card_name');",
							"    pm.environment.unset('report_card_id');",
							"    pm.environment.unset('report_msg');",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/members/me/boards?key={{api_key}}&token={{token}}&fields=name",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "fields",
							"value": "name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FindListIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6af27ee7-3b68-4b5d-bc09-7f7d10a5c4d3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var weekly_completion_list_id = -1;",
							"var overall_completion_list_id = -1;",
							"var incoming_list_id = -1;",
							"var inprogress_list_id = -1;",
							"",
							"var weekly_completion_list_name = pm.environment.get('weekly_completion_list_name');",
							"var overall_completion_list_name = pm.environment.get('overall_completion_list_name');",
							"var incoming_list_name = pm.environment.get('incoming_list_name');",
							"var inprogress_list_name = pm.environment.get('inprogress_list_name');",
							"var json_data = pm.response.json();",
							"",
							"for (var idx = 0 ; idx < json_data.length ; idx ++) {",
							"    if (json_data[idx].name == weekly_completion_list_name) {",
							"        weekly_completion_list_id = json_data[idx].id;",
							"        pm.environment.set('weekly_completion_list_id', weekly_completion_list_id);",
							"    }",
							"    if (json_data[idx].name == overall_completion_list_name) {",
							"        overall_completion_list_id = json_data[idx].id;",
							"        pm.environment.set('overall_completion_list_id', overall_completion_list_id);",
							"    }",
							"    if (json_data[idx].name == incoming_list_name) {",
							"        incoming_list_id = json_data[idx].id;",
							"        pm.environment.set('incoming_list_id', incoming_list_id);",
							"    }",
							"    if (json_data[idx].name == inprogress_list_name) {",
							"        inprogress_list_id = json_data[idx].id;",
							"        pm.environment.set('inprogress_list_id', inprogress_list_id);",
							"    }",
							"}",
							"",
							"pm.test(\"Get list ids\", function () {",
							"    pm.expect(weekly_completion_list_id).not.eql(-1);",
							"    pm.expect(overall_completion_list_id).not.eql(-1);",
							"    pm.expect(incoming_list_id).not.eql(-1);",
							"    pm.expect(inprogress_list_id).not.eql(-1);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "06c07e14-7fc2-4a54-b620-d157745d521e",
						"exec": [
							"pm.test('board_id should exist', function () {",
							"    pm.expect(pm.environment.has('board_id')).to.equal(true);",
							"});",
							"",
							"if (!pm.environment.has('board_id')) {",
							"    throw new Error ('Environment variable \"board_id\" is not available.')",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{board_id}}/lists?fields=name&key={{api_key}}&token={{token}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{board_id}}",
						"lists"
					],
					"query": [
						{
							"key": "fields",
							"value": "name"
						},
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetWeeklyCompletedListCards",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d74b8bb6-9ab7-4864-ae14-5d05aa3d7b3b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cards = pm.response.json();",
							"var cards_str = JSON.stringify(cards);",
							"var num_cards = cards.length;",
							"pm.environment.set('card_list', cards_str);",
							"pm.environment.set('cur_card_idx', num_cards - 1);",
							"",
							"var report_msg = pm.environment.get('report_msg');",
							"if (!report_msg) {",
							"    report_msg = \"\";",
							"}",
							"",
							"report_msg  += \"# Done this week (\" + num_cards + \")\\\\n\";",
							"_.each(cards, function(card, idx, cards) {",
							"    report_msg += \" - [\" + card.name + \"](\" + card.shortUrl + \")\\\\n\";",
							"});",
							"",
							"report_msg += \"\\\\n\";",
							"pm.environment.set('report_msg', report_msg);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a64749ff-62e2-4d16-8a65-99caf4d20f16",
						"exec": [
							"pm.test('weekly_completion_list_id should exist', function () {",
							"    pm.expect(pm.environment.has('weekly_completion_list_id')).to.equal(true);",
							"});",
							"",
							"if (!pm.environment.has('weekly_completion_list_id')) {",
							"    throw new Error ('Environment variable \"weekly_completion_list_id\" is not available.')",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists/{{weekly_completion_list_id}}/cards?fields=id,name,shortUrl&token={{token}}&key={{api_key}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists",
						"{{weekly_completion_list_id}}",
						"cards"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,name,shortUrl"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "key",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetInProgressListCards",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d6e99829-0430-49e9-8ba4-27ceb125c2ce",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cards = pm.response.json();",
							"var num_cards = cards.length;",
							"",
							"var report_msg = pm.environment.get('report_msg');",
							"if (!report_msg) {",
							"    report_msg = \"\";",
							"}",
							"",
							"report_msg  += \"# Pending this week (\" + num_cards + \")\\\\n\";",
							"_.each(cards, function(card, idx, cards) {",
							"    report_msg += \" - [\" + card.name + \"](\" + card.shortUrl + \")\\\\n\";",
							"});",
							"",
							"report_msg += \"\\\\n\";",
							"pm.environment.set('report_msg', report_msg);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "19bdc618-d74f-423a-b2a7-c24996bc0a34",
						"exec": [
							"pm.test('inprogress_list_id should exist', function () {",
							"    pm.expect(pm.environment.has('inprogress_list_id')).to.equal(true);",
							"});",
							"",
							"if (!pm.environment.has('inprogress_list_id')) {",
							"    throw new Error ('Environment variable \"inprogress_list_id\" is not available.')",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists/{{inprogress_list_id}}/cards?fields=id,name,shortUrl&token={{token}}&key={{api_key}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists",
						"{{inprogress_list_id}}",
						"cards"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,name,shortUrl"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "key",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetIncomingListCards",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7e60f9-fde5-41e0-b94a-5a4358010d4f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cards = pm.response.json();",
							"var num_cards = cards.length;",
							"",
							"var report_msg = pm.environment.get('report_msg');",
							"if (!report_msg) {",
							"    report_msg = \"\";",
							"}",
							"",
							"report_msg  += \"# New this week (\" + num_cards + \")\\\\n\";",
							"_.each(cards, function(card, idx, cards) {",
							"    report_msg += \" - [\" + card.name + \"](\" + card.shortUrl + \")\\\\n\";",
							"});",
							"",
							"report_msg += \"\\\\n\";",
							"pm.environment.set('report_msg', report_msg);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f835c0fb-f938-4971-8d86-7491767b0fd6",
						"exec": [
							"pm.test('incoming_list_id should exist', function () {",
							"    pm.expect(pm.environment.has('incoming_list_id')).to.equal(true);",
							"});",
							"",
							"if (!pm.environment.has('inprogress_list_id')) {",
							"    throw new Error ('Environment variable \"inprogress_list_id\" is not available.')",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists/{{incoming_list_id}}/cards?fields=id,name,shortUrl&token={{token}}&key={{api_key}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists",
						"{{incoming_list_id}}",
						"cards"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,name,shortUrl"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "key",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateTrackingLabel",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09169489-34a3-49bc-8748-ba790ebb18aa",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var json_data = pm.response.json();",
							"pm.environment.set('label_id', json_data.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/labels?key={{api_key}}&token={{token}}&idBoard={{board_id}}&name={{label_name}}&color={{label_color}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"labels"
					],
					"query": [
						{
							"key": "fields",
							"value": "name,color",
							"disabled": true
						},
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "idBoard",
							"value": "{{board_id}}"
						},
						{
							"key": "name",
							"value": "{{label_name}}"
						},
						{
							"key": "color",
							"value": "{{label_color}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "AddTrackingLabelToWeeklyCompletionListCards",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4275790c-e4da-491f-a980-0c5c0e1c44c0",
						"exec": [
							"var cards = JSON.parse(pm.environment.get('card_list'));",
							"var cur_card_idx = parseInt(pm.environment.get('cur_card_idx'));",
							"",
							"if (cur_card_idx < 0) {",
							"    throw new Error(\"Current card idx is \" + cur_card_idx + \". We shouldn't have gotten here. Buggy Code!\");",
							"}",
							"",
							"var cur_card_id = cards[cur_card_idx].id;",
							"pm.environment.set('cur_card_id', cur_card_id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42830bcb-1096-49d9-ab17-3fef3a99e89e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_card_idx = parseInt(pm.environment.get('cur_card_idx'));",
							"",
							"if (cur_card_idx > 0) {",
							"    pm.environment.set('cur_card_idx', cur_card_idx - 1);",
							"    postman.setNextRequest('AddTrackingLabelToWeeklyCompletionListCards');",
							"} else {",
							"    var num_cards = JSON.parse(pm.environment.get('card_list')).length;",
							"    pm.environment.set('cur_card_idx', num_cards - 1);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/cards/{{cur_card_id}}/idLabels?token={{token}}&key={{api_key}}&value={{label_id}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"{{cur_card_id}}",
						"idLabels"
					],
					"query": [
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "value",
							"value": "{{label_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MoveCardFromWeeklyDoneToOverallDone",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "69c81fe2-7f58-40a1-bd4c-4b8bb18c0a51",
						"exec": [
							"var cards = JSON.parse(pm.environment.get('card_list'));",
							"var cur_card_idx = parseInt(pm.environment.get('cur_card_idx'));",
							"",
							"if (cur_card_idx < 0) {",
							"    throw new Error(\"Current card idx is \" + cur_card_idx + \". We shouldn't have gotten here. Buggy Code!\");",
							"}",
							"",
							"var cur_card_id = cards[cur_card_idx].id;",
							"pm.environment.set('cur_card_id', cur_card_id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fb234754-bced-4879-beb1-152f5f76c55a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var cur_card_idx = parseInt(pm.environment.get('cur_card_idx'));",
							"",
							"if (cur_card_idx > 0) {",
							"    pm.environment.set('cur_card_idx', cur_card_idx - 1);",
							"    postman.setNextRequest('MoveCardFromWeeklyDoneToOverallDone');",
							"} else {",
							"    var num_cards = JSON.parse(pm.environment.get('card_list')).length;",
							"    pm.environment.set('cur_card_idx', num_cards - 1);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"idList\": \"{{overall_completion_list_id}}\",\n    \"pos\": \"top\"\n}"
				},
				"url": {
					"raw": "https://api.trello.com/1/cards/{{cur_card_id}}?key={{api_key}}&token={{token}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"{{cur_card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateReportCardInOverallCompletionList",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "540cd7f8-9141-45e3-a61f-8232e9401bca",
						"exec": [
							"var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];",
							"var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];",
							"var now = new Date();",
							"var day = days[now.getDay()];",
							"var date = now.getDate();",
							"var month = months[now.getMonth()];",
							"var year = now.getFullYear();",
							"",
							"var report_card_name = \"Report Card: \" + day + \" - \" + month + \" \" + date + \", \" + year;",
							"",
							"pm.environment.set('report_card_name', report_card_name);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "07a8a281-13dd-4e82-8139-00511245803f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var json_data = pm.response.json();",
							"pm.environment.set('report_card_id', json_data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/cards?key={{api_key}}&token={{token}}&idList={{overall_completion_list_id}}&name={{report_card_name}}&pos=top",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "idList",
							"value": "{{overall_completion_list_id}}"
						},
						{
							"key": "name",
							"value": "{{report_card_name}}"
						},
						{
							"key": "pos",
							"value": "top"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateReportCard",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7e9b63d-38cf-47a8-a63f-723c50d762fb",
						"exec": [
							"pm.test('report_card_id should exist', function () {",
							"    pm.expect(pm.environment.has('report_card_id')).to.equal(true);",
							"});",
							"",
							"if (!pm.environment.has('report_card_id')) {",
							"    throw new Error ('Environment variable \"report_card_id\" is not available.')",
							"}",
							"",
							"// If the report_msg is not defined, then set it to empty string",
							"var report_msg = pm.environment.get('report_msg');",
							"if (!report_msg) {",
							"    pm.environment.set('report_msg', \"\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dd0a69d4-97f2-4f9b-bcb3-03b4167a7b34",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"desc\": \"{{report_msg}}\",\n    \"cover\": {\n        \"color\": \"{{report_card_color}}\",\n        \"size\": \"full\",\n        \"brightness\": \"light\"\n    }\n}"
				},
				"url": {
					"raw": "https://api.trello.com/1/cards/{{report_card_id}}?key={{api_key}}&token={{token}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"{{report_card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteLabel",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c089a9e7-185d-4fb1-863a-12021627f9b4",
						"exec": [
							"pm.test('label_id should exist', function () {",
							"    pm.expect(pm.environment.has('label_id')).to.equal(true);",
							"});",
							"",
							"if (!pm.environment.has('label_id')) {",
							"    throw new Error ('Environment variable \"label_id\" is not available.')",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8dc397a5-3716-4718-907e-7e93be744a34",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/labels/{{label_id}}?key={{api_key}}&token={{token}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"labels",
						"{{label_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{api_key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "32032073-9818-45e2-a3c4-00c05081d699",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e6012189-be96-45f4-bb09-d321f32405d8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}